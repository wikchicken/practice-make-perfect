class Solution {
public:
    vector<vector<string>> partition(string s) {

        vector<string> path;
        vector<vector<string>> res;
        if(s.size() == 0)
            return res;

        dfs(s, get_palin_dict(s), 0, path, res);
        return res;
    }

    void dfs(string s, vector<vector<bool>> dict, int start, vector<string> path, vector<vector<string>> &result)
    {
        if(start == s.size())
        {
            result.push_back(path);
            return;
        }
        for(int i=start; i<s.size(); ++i)
        {
            if(dict[start][i])
            {
                path.push_back(s.substr(start, i-start+1));
                dfs(s, dict, i+1, path, result);
                path.pop_back();
            }
        }
    }

    vector<vector<bool>> get_palin_dict(string s)
    {
        vector<vector<bool>> parlin(s.size(), vector<bool>(s.size(), false));

        for(int i=s.size()-1; i>=0; --i)
        {
            for(int j=i; j<s.size(); ++j)
            {
                if(s[j]==s[i] && (j-i<2 || parlin[i+1][j-1]))
                {
                    parlin[i][j] = true;
                }
            }
        }

        return parlin;
    }
};
